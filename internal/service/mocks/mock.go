// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/kiryu-dev/mykinolist/internal/model"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockAuthService) Delete(arg0 int64) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAuthServiceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAuthService)(nil).Delete), arg0)
}

// GetUser mocks base method.
func (m *MockAuthService) GetUser(arg0 int64) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAuthServiceMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAuthService)(nil).GetUser), arg0)
}

// ParseAccessToken mocks base method.
func (m *MockAuthService) ParseAccessToken(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAccessToken", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAccessToken indicates an expected call of ParseAccessToken.
func (mr *MockAuthServiceMockRecorder) ParseAccessToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAccessToken", reflect.TypeOf((*MockAuthService)(nil).ParseAccessToken), arg0)
}

// ParseRefreshToken mocks base method.
func (m *MockAuthService) ParseRefreshToken(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRefreshToken", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRefreshToken indicates an expected call of ParseRefreshToken.
func (mr *MockAuthServiceMockRecorder) ParseRefreshToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRefreshToken", reflect.TypeOf((*MockAuthService)(nil).ParseRefreshToken), arg0)
}

// SignIn mocks base method.
func (m *MockAuthService) SignIn(arg0 *model.SignInUserDTO) (*model.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", arg0)
	ret0, _ := ret[0].(*model.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthServiceMockRecorder) SignIn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthService)(nil).SignIn), arg0)
}

// SignOut mocks base method.
func (m *MockAuthService) SignOut(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignOut", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignOut indicates an expected call of SignOut.
func (mr *MockAuthServiceMockRecorder) SignOut(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignOut", reflect.TypeOf((*MockAuthService)(nil).SignOut), arg0)
}

// SignUp mocks base method.
func (m *MockAuthService) SignUp(arg0 *model.SignUpUserDTO) (*model.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", arg0)
	ret0, _ := ret[0].(*model.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthServiceMockRecorder) SignUp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuthService)(nil).SignUp), arg0)
}

// UpdateTokens mocks base method.
func (m *MockAuthService) UpdateTokens(arg0 int64) (*model.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTokens", arg0)
	ret0, _ := ret[0].(*model.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTokens indicates an expected call of UpdateTokens.
func (mr *MockAuthServiceMockRecorder) UpdateTokens(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTokens", reflect.TypeOf((*MockAuthService)(nil).UpdateTokens), arg0)
}

// MockListService is a mock of ListService interface.
type MockListService struct {
	ctrl     *gomock.Controller
	recorder *MockListServiceMockRecorder
}

// MockListServiceMockRecorder is the mock recorder for MockListService.
type MockListServiceMockRecorder struct {
	mock *MockListService
}

// NewMockListService creates a new mock instance.
func NewMockListService(ctrl *gomock.Controller) *MockListService {
	mock := &MockListService{ctrl: ctrl}
	mock.recorder = &MockListServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListService) EXPECT() *MockListServiceMockRecorder {
	return m.recorder
}

// AddMovie mocks base method.
func (m *MockListService) AddMovie(arg0 context.Context, arg1 *model.ListUnit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMovie", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMovie indicates an expected call of AddMovie.
func (mr *MockListServiceMockRecorder) AddMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMovie", reflect.TypeOf((*MockListService)(nil).AddMovie), arg0, arg1)
}
